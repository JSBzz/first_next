generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model post {
  id           Int            @id @default(autoincrement())
  title        String?        @db.VarChar
  contents     String?
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  is_delete    Boolean?       @default(false)
  user_id      Int?
  user         user?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post_comment post_comment[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user {
  id            Int            @id @default(autoincrement())
  nickname      String?        @db.VarChar
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  is_delete     Boolean?       @default(false)
  password      String?        @db.VarChar
  provider_type String?        @db.VarChar
  provider_code String?        @db.VarChar
  email         String         @unique @db.VarChar
  image         String?        @db.VarChar
  post          post[]
  post_comment  post_comment[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model post_comment {
  id          Int      @id @default(autoincrement())
  post_id     Int?
  writer_id   Int?
  contents    String?  @db.VarChar
  reply_count Int?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  is_update   Boolean? @default(false)
  is_delete   Boolean? @default(false)
  post        post?    @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user?    @relation(fields: [writer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
